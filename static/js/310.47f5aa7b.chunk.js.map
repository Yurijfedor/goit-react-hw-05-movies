{"version":3,"file":"static/js/310.47f5aa7b.chunk.js","mappings":"2LAEaA,EAAoB,SAAC,GAA6C,IAAD,IAA1CC,KAAQC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,GAAMC,EAAe,EAAfA,SAC7D,OAAOH,GACL,yBACE,SAAC,KAAD,CAAMI,GAAI,CAAEC,SAAS,WAAD,OAAaH,IAAQI,MAAO,CAAEC,KAAMJ,GAAxD,SACGH,OAIL,yBACE,SAAC,KAAD,CAAMI,GAAI,CAAEC,SAAS,WAAD,OAAaH,IAAQI,MAAO,CAAEC,KAAMJ,GAAxD,SACGF,KAIR,C,+HCdYO,E,OAAcC,GAAAA,MAAH,yC,0BCgExB,EA3De,WAAO,IAAD,EACnB,GAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0BL,EAAAA,EAAAA,YAA1B,eAAOM,EAAP,KAAcC,EAAd,KACMC,EAAS,UAAGJ,EAAaK,IAAI,gBAApB,QAAgC,GACzChB,GAAWiB,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACHH,IAGLI,EAAAA,EAAAA,IAAkBJ,GAAWK,MAAK,SAAAC,GAChCZ,GAAa,OAAIY,EAASC,KAAKC,SAChC,GACF,GAAE,CAACR,IAEJ,IAOMS,EAAY,kBAAMV,EAAS,GAAf,EASlB,OACE,iCACE,kBAAMW,SAlBW,SAAAC,GACnBA,EAAIC,iBACJf,EAAgB,CAAEC,MAAOA,IAEzBW,GACD,EAaG,WACE,SAACnB,EAAD,CACEuB,KAAK,SACL9B,KAAK,cACL+B,YAAY,eACZC,MAAOjB,EACPkB,SAfY,SAAAL,GAIlBZ,EAASY,EAAIM,OAAOF,MACrB,KAYK,mBAAQF,KAAK,SAAb,uBAEDb,GACC,wBACGP,EAAUyB,KAAI,SAACC,EAAOC,GACrB,OACE,SAACxC,EAAA,EAAD,CAA2BC,KAAMsC,EAAOlC,SAAUA,GAA1BmC,EAE3B,MAGH,IAEF,SAAC,KAAD,MAGL,C,sNChEKC,EAAW,gCAEXC,EAAU,IAAIC,gBAAgB,CAClCC,QAFc,qCAKHC,EAAY,kCAEZC,EAAmB,mCAAG,6GAEFC,EAAAA,GAAAA,IAAA,UACxBN,EADwB,6BACKC,IAHH,cAEzBM,EAFyB,yBAKxBA,GALwB,gCAO/BC,QAAQC,IAAR,MAP+B,yDAAH,qDAWnBC,EAAc,mCAAG,WAAM/C,GAAN,gGAED2C,EAAAA,GAAAA,IAAA,UAAaN,EAAb,iBAA8BrC,EAA9B,YAAoCsC,IAFnC,cAEpBU,EAFoB,yBAGnBA,GAHmB,gCAK1BH,QAAQC,IAAR,MAL0B,yDAAH,sDASdG,EAAc,mCAAG,WAAMjD,GAAN,gGAEF2C,EAAAA,GAAAA,IAAA,UACnBN,EADmB,iBACFrC,EADE,oBACYsC,IAHV,cAEpBY,EAFoB,yBAKnBA,GALmB,gCAO1BL,QAAQC,IAAR,MAP0B,yDAAH,sDAWdK,EAAgB,mCAAG,WAAMnD,GAAN,gGAEF2C,EAAAA,GAAAA,IAAA,UACrBN,EADqB,iBACJrC,EADI,oBACUsC,IAHR,cAEtBc,EAFsB,yBAKrBA,GALqB,gCAO5BP,QAAQC,IAAR,MAP4B,yDAAH,sDAWhB1B,EAAiB,mCAAG,WAAMN,GAAN,gGAEF6B,EAAAA,GAAAA,IAAA,UACtBN,EADsB,wBACEC,EADF,kBACmBxB,IAHjB,cAEvBuC,EAFuB,yBAKtBA,GALsB,gCAO7BR,QAAQC,IAAR,MAP6B,yDAAH,qD","sources":["components/TrendingMovieItem.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","services/TmdbApiServices.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\n\nexport const TrendingMovieItem = ({ link: { title, name, id }, location }) => {\n  return title ? (\n    <li>\n      <Link to={{ pathname: `/movies/${id}` }} state={{ from: location }}>\n        {title}\n      </Link>\n    </li>\n  ) : (\n    <li>\n      <Link to={{ pathname: `/movies/${id}` }} state={{ from: location }}>\n        {name}\n      </Link>\n    </li>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledInput = styled.input`\n  width: 390px;\n`;\n","import { useSearchParams, useLocation, Outlet } from 'react-router-dom';\n\nimport { useState, useEffect } from 'react';\nimport { StyledInput } from './Movies.styled';\nimport { FetchSearchMovies } from 'services/TmdbApiServices';\nimport { TrendingMovieItem } from 'components/TrendingMovieItem';\n\nconst Movies = () => {\n  const [movieList, setMovieList] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState();\n  const movieName = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!movieName) {\n      return;\n    }\n    FetchSearchMovies(movieName).then(response => {\n      setMovieList([...response.data.results]);\n    });\n  }, [movieName]);\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    setSearchParams({ query: query });\n    // evt.target.reset();\n    formReset();\n  };\n\n  const formReset = () => setQuery('');\n\n  const updateQuery = evt => {\n    // const nextParams =\n    //   evt.target.value !== '' ? { query: evt.target.searshQuery.value } : {};\n    // setSearchParams(nextParams);\n    setQuery(evt.target.value);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <StyledInput\n          type=\"search\"\n          name=\"searshQuery\"\n          placeholder=\"Movie search\"\n          value={query}\n          onChange={updateQuery}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {movieName ? (\n        <ul>\n          {movieList.map((movie, i) => {\n            return (\n              <TrendingMovieItem key={i} link={movie} location={location} />\n            );\n          })}\n        </ul>\n      ) : (\n        ''\n      )}\n      <Outlet />\n    </>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '262a417f78469232900b1579d8d8e776';\nconst options = new URLSearchParams({\n  api_key: API_KEY,\n});\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const FetchTrendingMovies = async () => {\n  try {\n    const trendingMovies = await axios.get(\n      `${BASE_URL}trending/all/week?${options}`\n    );\n    return trendingMovies;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const FetchMovieById = async id => {\n  try {\n    const moviesById = await axios.get(`${BASE_URL}movie/${id}?${options}`);\n    return moviesById;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const FetchMovieCast = async id => {\n  try {\n    const movieCast = await axios.get(\n      `${BASE_URL}movie/${id}/credits?${options}`\n    );\n    return movieCast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const FetchMovieReview = async id => {\n  try {\n    const movieReview = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?${options}`\n    );\n    return movieReview;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const FetchSearchMovies = async query => {\n  try {\n    const searchMovies = await axios.get(\n      `${BASE_URL}search/movie?${options}&query=${query}`\n    );\n    return searchMovies;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["TrendingMovieItem","link","title","name","id","location","to","pathname","state","from","StyledInput","styled","useState","movieList","setMovieList","useSearchParams","searchParams","setSearchParams","query","setQuery","movieName","get","useLocation","useEffect","FetchSearchMovies","then","response","data","results","formReset","onSubmit","evt","preventDefault","type","placeholder","value","onChange","target","map","movie","i","BASE_URL","options","URLSearchParams","api_key","IMAGE_URL","FetchTrendingMovies","axios","trendingMovies","console","log","FetchMovieById","moviesById","FetchMovieCast","movieCast","FetchMovieReview","movieReview","searchMovies"],"sourceRoot":""}